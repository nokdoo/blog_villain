=encoding utf8

=pod

=head1 Preface

프로그래머는 생각을 텍스트로 나타낸다.

vim 은 이를 위한 매우 강력한 도구지만, 사용자의 습관을 녹여내지 못하면 그 빛을 발하지 못한다.
이 글에서는 vim 을 사용자에 맞게 커스터마이징하기 위한 언어인, vimscript 에 대해 다룬다.

다른 언어 책과는 달리 여기에서는 체험을 먼저 제공하고 설명이 뒤따를 것이다.
B<모든 내용을 직접 타이핑해보고 각각이 어떤 일을 하는지 이해하기 바란다.>
이는 필요한 기능을 언제라도 떠올리기 위해 필수적인 과정이다.

=head1 Prerequisites

이 글이 쓰여질 당시의 vim 버전은 7.3 이다. vim 은 이전 버전과 항상 호환되므로 7.3 이상의 버전이 준비되어 있어야 한다.

vim 에 익숙하고, B<buffer>, B<window>, B<normal mode>, B<insert mode>, B<text object> 에 대한 기본 지식이 있어야 한다.

=head2 Creating a vimrc File

=head1 Echoing Messages

=head2 Persistent Echoing

=begin html

<pre><code class='vim hljs'>
:echo "Hello, world"
</code></pre>

=end html


=begin html

<pre><code class='vim hljs'>
:echom "Hello, again world"
</code></pre>

=end html

이 둘은 하단에 'Hello, world', 'Hello, again world' 를 출력하게 된다.

그렇다면 어떤 차이가 있을까?

=begin html

<pre><code class='vim hljs'>
:messages
</code></pre>

=end html

를 쳐보면 I<echom> 에 의한 'Hello, again world' 를 확인할 수 있다.

=head1 Setting Options

vim 에는 많은 옵션들이 있고 이것은 크게 boolean 을 받는 것과 value 를 받는 것으로 종류가 나뉜다.

=head2 Boolean options

다음의 명령어를 하나씩 실행해보자.

=begin html

<pre><code class='vim hljs'>
:set number
:set nonumber
</code></pre>

=end html

현재 화면에 보여지고 있는 파일의 라인 번호를 보여주거나 감추는 명령어다.

여기에서 옵션의 이름은 B<number> 이며 I<on> 또는 I<off> 값을 갖는다.

I<:set number> 는 number 옵션의 값을 I<on> 으로, I<:set nonumber> 는 number 옵션의 값을 I<off> 로 바꿔준다.

모든 boolean 옵션은 이처럼 변경될 수 있다.

=head3 Toggling Boolean Options

=begin html

<pre><code class='vim hljs'>
:set number!
</code></pre>

=end html

를 입력하면 boolean option 의 값을 토글링할 수 있다.

=head2 Options with Values

value 를 받는 옵션은 다음처럼 값 변경이 가능하다.

=begin html

<pre><code class='vim hljs'>
" 라인 번호를 보여주는 영역의 최소 크기
:set numberwidth=10
:set numberwidth=4
:set numberwidth?
</code></pre>

=end html

다른 옵션들도 잠깐 살펴보자.

=begin html

<pre><code class='vim hljs'>
:set wrap?         " 자동 줄바꿈
:set shiftround?   " >> 명령어로 인덴팅 시 shiftwidth 구간을 벗어나지 않도록 설정하는 것
:set matchtime?    " 괄호를 닫을 때 그 쌍의 위치를 보여줌 (10분의 n 초)
</code></pre>

=end html


=head2 Setting Multiple Options at Once

다음처럼 여러 옵션을 한 번에 설정하는 것이 가능하다.

=begin html

<pre><code class='vim hljs'>
:set number numberwidth=6
</code></pre>

=end html

=head1 Basic Mapping

B<I<내가 이 키를 누르면 넌 이 동작을 해야만 해>>

다음의 명령을 실행해보자.

=begin html

<pre><code class='vim hljs'>
:map - dd
</code></pre>

=end html

이제 I<-> 를 누르면 dd 명령어가 시작되고 커서가 위치한 라인이 삭제된다.

* I<map> 은 normal mode 에서 키를 매핑한다.

=head2 Special Characters

<keyname> 를 사용하면 이미 이름이 지정된 키를 매핑할 수 있다.

=begin html

<pre><code class='vim hljs'>
:map <space> viw
</code></pre>

=end html

space 를 누르면 viw 가 실행되고 이는 현재 커서가 위치한 word 를 visually select 한다.

Ctrl 은 다음처럼 사용할 수 있다.

=begin html

<pre><code class='vim hljs'>
" Ctrl + d
:map <c-d> dd
</code></pre>

=end html

=head1 Modal Mapping

I<map> 말고도 I<nmap>, I<vmap>, I<imap> 이 있다.

이들은 각각 normal, visual, insert 모드에서 키를 매핑한다.

=head2 Muscle Memory

우리가 vim 을 사용할 때 생각하는 것은 I<'dd 를 입력해라'>가 아닌 I<'한 줄을 삭제해라'>다. 생각보다도 손가락이 먼저 당신의 매핑에 반응할 것이다.

=head2 Insert Mode

다음의 매핑을 설정해보자.

=begin html

<pre><code class='vim hljs'>
:imap <c-d> dd
</code></pre>

=end html

Ctrl + d 를 입력하면 생각했던 것과는 다르게 동작할 것이다. 이는 vim 은 우리의 명령어를 있는 그대로 입력하기 때문이다.

insert mode 에서 dd 를 누른다면 당연히 dd 가 입력될 것이다. 따라서 다음처럼 바꿔줘야 한다.

=begin html

<pre><code class='vim hljs'>
:map <c-d> <esc>dd
</code></pre>

=end html

이 명령이 종료되면 normal mode 상태로 남아있게 된다. 다시 insert mode 로 돌아오기 위해 다음을 추가해주자.

=begin html

<pre><code class='vim hljs'>
:map <c-d> <esc>ddi
</code></pre>

=end html

=head1 Strict Mapping

매핑은 우리가 지정해놓은 명령을 그대로 입력한다고 했다. 그러면 다음의 명령은 어떨까?

=begin html

<pre><code class='vim hljs'>
:nmap - dd
:nmap \ -
</code></pre>

=end html

I<\> 를 입력하면 최종적으로 I<dd> 가 실행될 것이다.

이를 위해서 B<*noremap>(nonrecursive map) 이 존재한다. * 는 i, n, v 으로 대체될 수 있다.

B<I<항상 map 대신 noremap 을 사용하자.>>

=head1 Leaders

지금까지 mapping 을 통해 새로운 명령어를 추가했지만 한 가지 문제가 남아있다.
새롭게 추가된 명령어가 기존의 vim 명령어를 덮어씌워버린다면?

이에 대비하기 위해 다음의 여섯 키를 조합하자.

=over

=item * -

=item * H

=item * L

=item * <space>

=item * <cr>

=item * <bs>

=back

이 키들은 어떤 명령어와도 연결되어 있지 않다. 이들 중 하나를 prefix 로서 사용해보자.

=begin html

<pre><code class='vim hljs'>
:nnoremap -d dd
</code></pre>

=end html

vim 에서는 prefix 라는 용어를 I<leader> 라고 부른다. 그리고 다음과 같은 설정을 지원한다.

=begin html

<pre><code class='vim hljs'>
:let mapleader = "-"

:nnoremap <leader>d dd
</code></pre>

=end html

이를 통해 앞서 봤었던 I<-d> 명령어를 새롭게 정의할 수 있다. 
많은 vim plugin 들이 기본적으로 <leader> 를 mapping 에 사용하고 있기 때문에 익숙해지면 좋다.

=head2 Local Leader

leader 말고도 B<local leader> 라는 개념이 있는데, 이는 특정 파일에 대해 mapping 을 적용하기 위해 사용된다.
자세한 내용은 나중에 다루도록 한다.

=head1 Editing Your Vimrc

지금까지 우리는 vimrc 를 수정하고 적용하기 위해서 vim 을 다시 실행했을 것이다.

집중력을 잃지 않기 위해 더 나은 방법을 찾아보자.

=head2 Editing Mapping and Sourcing Mapping

=begin html

<pre><code class='vim hljs'>
:nnoremap <leader>ev :vsp $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>
</code></pre>

=end html

각각의 명령어는 "edit vimrc", "source vimrc" 의 약어이다.
B<ev> 명령어를 사용하면 vimrc 파일을 수정하기 위해 새로운 창이 열리게 되고,
B<sv> 명령어를 사용하면 vimrc 파일을 현재 vim 에 적용시킨다.

=head1 Abbreviations And Substitute

=begin html

<pre><code class='vim hljs'>
:iabbrev waht what
</code></pre>

=end html

이제 "I don't know waht should I do" 를 직접 입력해보자.

이 mapping 은 입력모드에서 vim 이 입력받은 특정 단어를 다음의 단어로 교체해주는
기능을 한다. 오타 수정에 쓰이며 특정 단어에 대한 약어를 지정할 수도 있다.

=head1 Disable mapping

특정 모드에서 빠져나오기 위해서 <esc> 를 사용해왔다. 어떤 사람들은 이를 위해
다른 키를 매핑해놓기도 하는데, 그 과정에 <esc> 를 블록시켜 머릿 속에서
지우는 훈련을 하기도 한다.

=begin html

<pre><code class='vim hljs'>
:inoremap <esc> <nop>
</code></pre>

=end html

이 mapping 을 만들어 두면 입력모드에서 <esc> 는 더이상 동작하지 않는다.

* <esc> 의 대체 mapping 은 <c-c>, <c-[> 가 있으니 당황하지 말고 빠져나오자.

=head1 Buffer-Local Options and Mappings

지금까지 option, mapping, abbreviation 에 대해 알아봤다.
이제 이들을 하나의 buffer 에 놓으려하는데, 그 전에 기초를 다질 필요가 있다.

하나의 vim 에서 I<vs> 명령어를 이용해 두 파일을 열어보자. (각각을 foo, bar 라 하자.)

그리고 foo 에서 다음의 명령어를 지정하자.

=begin html

<pre><code class='vim hljs'>
:nnoremap <leader>d dd
:nnoremap <buffer> <leader>x dd
</code></pre>

=end html

<leader>d 와 <leader>x 를 입력하면 둘 다 한 줄을 삭제하는 기능을 할 것이다.

이제 <c-w> + 화살표(혹은 hjkl) 를 이용해 bar 파일로 커서를 옮겨보고 같은 명령어를 입력해보자.

두 번째 명령어는 foo 파일에서 동작했던 것과 다를 것이다. 왜 그럴까?

여기에 buffer 라는 개념이 등장한다. 분리된 화면은 각각 독립적인 buffer 를 가지고 있고,
두 번째 명령어는 현재 buffer 에서 명령어를 설정하기 때문이다.

이렇게 buffer 에서 mapping 을 지정하는 것을 buffer-local mapping 이라 한다.
그리고 <buffer> <leader> 명령어 대신 <localleader> 를 사용하면 된다.

이렇게 두 개의 leader 가 존재하는 이유는 namespace 를 지켜주기 위해서다.
예로, vim 플러그인을 만들 때 다른 사람의 설정을 망가뜨리지 않도록 도와준다.

하지만 <localleader> 를 vimrc 에 지정하면 모든 버퍼가 이를 공유하게 되므로 효과를 받지 못한다.

=head2 Settings and Shadowing

다음은 특정 버퍼에서 set 이 적용하는 방법이다.

=begin html

<pre><code class='vim hljs'>
:setlocal nonumber
</code></pre>

=end html


=begin html

<pre><code class='vim hljs'>
:nnoremap <buffer> Q x
" vs
:nnoremap Q dd
</code></pre>

=end html

첫 번째 명령이 더 명시적이기 때문에 두 번째 명령은 동작하지 않는다.

=cut
