=encoding utf8

=pod

=head1 Preface

프로그래머는 생각을 텍스트로 나타낸다.

vim 은 이를 위한 매우 강력한 도구지만, 사용자의 습관을 녹여내지 못하면 그 빛을 발하지 못한다.
이 글에서는 vim 을 사용자에 맞게 커스터마이징하기 위한 언어인, vimscript 에 대해 다룬다.

다른 언어 책과는 달리 여기에서는 체험을 먼저 제공하고 설명이 뒤따를 것이다.
B<모든 내용을 직접 타이핑해보고 각각이 어떤 일을 하는지 이해하기 바란다.>
이는 필요한 기능을 언제라도 떠올리기 위해 필수적인 과정이다.

=head1 Prerequisites

이 글이 쓰여질 당시의 vim 버전은 7.3 이다. vim 은 이전 버전과 항상 호환되므로 7.3 이상의 버전이 준비되어 있어야 한다.

vim 에 익숙하고, B<buffer>, B<window>, B<normal mode>, B<insert mode>, B<text object> 에 대한 기본 지식이 있어야 한다.

=head2 Creating a vimrc File

=head1 Echoing Messages

=head2 Persistent Echoing

=begin html

<pre><code class='vim hljs'>
:echo "Hello, world"
</code></pre>

=end html


=begin html

<pre><code class='vim hljs'>
:echom "Hello, again world"
</code></pre>

=end html

이 둘은 하단에 'Hello, world', 'Hello, again world' 를 출력하게 된다.

그렇다면 어떤 차이가 있을까?

=begin html

<pre><code class='vim hljs'>
:messages
</code></pre>

=end html

를 쳐보면 I<echom> 에 의한 'Hello, again world' 를 확인할 수 있다.

=head1 Setting Options

vim 에는 많은 옵션들이 있고 이것은 크게 boolean 을 받는 것과 value 를 받는 것으로 종류가 나뉜다.

=head2 Boolean options

다음의 명령어를 하나씩 실행해보자.

=begin html

<pre><code class='vim hljs'>
:set number
:set nonumber
</code></pre>

=end html

현재 화면에 보여지고 있는 파일의 라인 번호를 보여주거나 감추는 명령어다.

여기에서 옵션의 이름은 B<number> 이며 I<on> 또는 I<off> 값을 갖는다.

I<:set number> 는 number 옵션의 값을 I<on> 으로, I<:set nonumber> 는 number 옵션의 값을 I<off> 로 바꿔준다.

모든 boolean 옵션은 이처럼 변경될 수 있다.

=head3 Toggling Boolean Options

=begin html

<pre><code class='vim hljs'>
:set number!
</code></pre>

=end html

를 입력하면 boolean option 의 값을 토글링할 수 있다.

=head2 Options with Values

value 를 받는 옵션은 다음처럼 값 변경이 가능하다.

=begin html

<pre><code class='vim hljs'>
" 라인 번호를 보여주는 영역의 최소 크기
:set numberwidth=10
:set numberwidth=4
:set numberwidth?
</code></pre>

=end html

다른 옵션들도 잠깐 살펴보자.

=begin html

<pre><code class='vim hljs'>
:set wrap?         " 자동 줄바꿈
:set shiftround?   " >> 명령어로 인덴팅 시 shiftwidth 구간을 벗어나지 않도록 설정하는 것
:set matchtime?    " 괄호를 닫을 때 그 쌍의 위치를 보여줌 (10분의 n 초)
</code></pre>

=end html


=head2 Setting Multiple Options at Once

다음처럼 여러 옵션을 한 번에 설정하는 것이 가능하다.

=begin html

<pre><code class='vim hljs'>
:set number numberwidth=6
</code></pre>

=end html

=head1 Basic Mapping

B<I<내가 이 키를 누르면 넌 이 동작을 해야만 해>>

다음의 명령을 실행해보자.

=begin html

<pre><code class='vim hljs'>
:map - dd
</code></pre>

=end html

이제 I<-> 를 누르면 dd 명령어가 시작되고 커서가 위치한 라인이 삭제된다.

* I<map> 은 normal mode 에서 키를 매핑한다.

=head2 Special Characters

<keyname> 를 사용하면 이미 이름이 지정된 키를 매핑할 수 있다.

=begin html

<pre><code class='vim hljs'>
:map <space> viw
</code></pre>

=end html

space 를 누르면 viw 가 실행되고 이는 현재 커서가 위치한 word 를 visually select 한다.

Ctrl 은 다음처럼 사용할 수 있다.

=begin html

<pre><code class='vim hljs'>
" Ctrl + d
:map <c-d> dd
</code></pre>

=end html

=head1 Modal Mapping

I<map> 말고도 I<nmap>, I<vmap>, I<imap> 이 있다.

이들은 각각 normal, visual, insert 모드에서 키를 매핑한다.

=head2 Muscle Memory

우리가 vim 을 사용할 때 생각하는 것은 I<'dd 를 입력해라'>가 아닌 I<'한 줄을 삭제해라'>다. 생각보다도 손가락이 먼저 당신의 매핑에 반응할 것이다.

=head2 Insert Mode

다음의 매핑을 설정해보자.

=begin html

<pre><code class='vim hljs'>
:imap <c-d> dd
</code></pre>

=end html

Ctrl + d 를 입력하면 생각했던 것과는 다르게 동작할 것이다. 이는 vim 은 우리의 명령어를 있는 그대로 입력하기 때문이다.

insert mode 에서 dd 를 누른다면 당연히 dd 가 입력될 것이다. 따라서 다음처럼 바꿔줘야 한다.

=begin html

<pre><code class='vim hljs'>
:map <c-d> <esc>dd
</code></pre>

=end html

이 명령이 종료되면 normal mode 상태로 남아있게 된다. 다시 insert mode 로 돌아오기 위해 다음을 추가해주자.

=begin html

<pre><code class='vim hljs'>
:map <c-d> <esc>ddi
</code></pre>

=end html

=head1 Strict Mapping

매핑은 우리가 지정해놓은 명령을 그대로 입력한다고 했다. 그러면 다음의 명령은 어떨까?

=begin html

<pre><code class='vim hljs'>
:nmap - dd
:nmap \ -
</code></pre>

=end html

I<\> 를 입력하면 최종적으로 I<dd> 가 실행될 것이다.

이를 위해서 B<*noremap>(nonrecursive map) 이 존재한다. * 는 i, n, v 으로 대체될 수 있다.

B<I<항상 map 대신 noremap 을 사용하자.>>


=cut
