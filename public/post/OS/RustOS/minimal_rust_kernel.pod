=encoding utf8

=pod

=head1 NAME

A Minimal Rust Kernel

=head2 The Boot Process

컴퓨터를 켜면 마더보드 ROM 에 저장된 펌웨어 코드가 실행된다. 
이 코드는 자가 테스트를 수행하고, RAM 을 감지하고, CPU 와 하드웨어를 초기화 시킨다. 
그 후에 부팅 가능한 디스크를 찾고 os 커널 을 부팅한다.

펌웨어 코드에는 두 가지가 있다.

=over 

=item * BIOS - Basic Input/Output System ( 이 프로젝트에서 사용될 펌웨어 코드 )

=item * UEFI - Unified Extensible Firmware Interface

=back

BIOS 는 오래되었지만 x86 기기를 잘 지원한다. 반대로, UEFI 는 모던하고 많은 특성을 가지고 있지만 설치하기에 복잡하다.

=head2 BIOS Boot

대부분의 x86 시스템은 BIOS 부팅을 지원한다. UEFI 기반의 기기도 에뮬레이트 된 BIOS 를 지원한다. 
이는 모든 기기에서 같은 부트 논리를 사용하는 장점을 갖는다. 그러나 이런 호환성은 CPU 가 16-bit 호환 모드(real mode)로 진입하게 만드는 매우 큰 단점을 갖는다.

컴퓨터를 켜면 BIOS 부팅은 마더보드에 위치한 플래시 메모리로부터 BIOS 를 로드한다. BIOS 는 자가 테스트와 하드웨어 초기화를 수행한 후 부팅 가능한 디스크를 찾는다. 
디스크를 찾으면 제어권이 해당 디스크의 부트로더로 넘어간다. 부트로더란 디스크의 시작점에 저장된 512 바이트 크기의 실행코드를 말한다. 
일반적으로 부트로더는 512 바이트보다 크고 이는 두 영역으로 나뉘어진다.

부트로더는 디스크에 위치한 커널 이미지의 외치를 확인하고 이를 메모리로 로드해야 한다. 
이때 cpu 는 16-bit 호환 모드에서 32-bit protected mode 로 전환되고, 다시 64-bit long mode 로 전환되어야 한다. 
64-bit 레지스터와 메인 메모리를 사용해야 하니까. 그리고 다음 작업으로, BIOS 에서 특정 정보들을 찾아 os 커널에 전달한다.

부트로더를 작성하는 것은 어셈블리어를 사용해야하고 예측하기 어려운 많은 과정이 있기 때문에 다루지 않는다.

=head2 The Multiboot Standard

하나의 os 에만 호환되는 부트로더 구현을 피하기 위해서 Free Software Foundation 은 Multiboot 라는 이름의 부트로더 표준을 만들었다. 
이 표준은 Multiboot 부트로더가 Multiboot os 를 로드할 수 있도록 부트로더와 os 사이의 인터페이스를 정의한다.
GNU GRUB 은 리눅스 시스템에서 가장 널리 쓰이는 Multiboot 구현체이다.

Multiboot 커널을 만들기 위해서는 커널 파일의 시작점에 Multiboot 헤더를 삽입이 필요하다. 이는 os 의 GRUB 부팅을 쉽게 만든다. 

하지만 GRUB 과 Multiboot standard 에는 몇 가지 문제가 있다.

=over

=item * 이들은 32-bit protected mode 만을 지원한다. 이후에 CPU 를 64-bit long mode 로 바꿔줘야 한다.

=item * 이들은 커널 대신 부트로더를 간단하게 만들었다.

예를 들면, 커널은 기본 페이지 크기에 연결되어야 한다. 그렇지 않으면 GRUB 은 Multiboot 헤더를 찾지 못한다. 또,
커널에 전달되는 부트 정보들이 추상화를 전달하는 대신에 많은 아키텍처 종속 구조를 가지고 있다.

=item * GRUB 과 Multiboot standard 은 문서화가 제대로 이루어지지 않았다.

=item * 커털 파일로부터 부팅 가능한 이미지를 만들기 위해서 GRUB 이 host system 에 설치되어야 한다. 윈도우와 맥에서 이것을 개발하는 것은 더 어렵다.

=back

이런 단점들 때문에 GRUB 과 Multiboot standard 을 사용하지 않을 것이다.

=head2 A Minimal Kernel

이제 minimal 커널을 만들어 보자. 목표는 부팅 시 화면에 'Hello World!' 를 출력하는 디스크 이미지를 만드는 것이다.

이를 위해 L<freestanding Rust binary|https://os.phil-opp.com/freestanding-rust-binary/> 환경에서 이를 빌드할 것이다.

커널은 최상위에서 실행되기 때문에 host system 에 의존하는 cargo 사용은 우리가 원하는 것이 아니다.

=head2 Installing Rust Nightly

러스트에는 세 가지 release channel 이 있다. B<stable>, B<beta>, B<nightly>. 
L<TRPL|https://rinthel.github.io/rust-lang-book-ko/appendix-07-nightly-rust.html> 에서 이들의 차이점을 확인할 수 있다.
os 를 빌드하기 위해서 B<nightly channel> 에서 이용 가능한 실험적인 feature 가 필요하다. 러스트의 nightly 버전을 설치해보자.

rustup 을 이용하면 위의 세 가지 release channel 을 쉽게 설치할 수 있다. 현재 디렉토리에서 I<rustup override add nightly> 를 실행하면 nightly 컴파일러는 사용할 수 있다. 
다른 방법으로는 I<rust-toolchain> 파일을 root directory 에 추가하고 그 안에 I<nightly> 를 적는 것이다.

소스 파일 상단부에 I<feature flags> 를 추가해줌으로써 nightly channel 의 실험적인 feature 를 사용할 수 있다. 
예를 들어 인라인 어셈블리를 위한 I<asm!> 를 사용하고 싶다면 B<main.rs> 의 상단부에 I<#![feature(asm)]> 을 추가해주면 된다.
이런 실험적인 feature 는 러스트가 진화함에 따라 언제든 변경되고 제거될 수 있다.

=head2 Target Specification

cargo 는 I<--target> 옵션을 통해 다양한 target system 을 지원한다. target 은 CPU 아키텍처의 vendor, os, ABI 를 기술하는 B<target triple> 로 설명된다.
예를 들어 B<x86_64-unknown-linux-gnu> target triple 은 B<x86_64 CPU>, B<unknown vendor>, B<Linux operating system with the GNU ABI> 를 나타낸다.

만들어볼 os 는 새로운 target system 에서 돌아갈 것이므로 target system 을 새롭게 만들어줘야 한다. 러스트는 JSON 기반의 새로운 target 을 정의할 수 있게 해준다.

I<x86_64-rust_os.json> 파일을 만들고 다음을 작성하자.

=begin html

<pre><code class="json">
{
    "llvm-target": "x86_64-unknown-none",
    "data-layout": "e-m:e-i64:64-f80:128-n8:16:32:64-S128",
    "arch": "x86_64",
    "target-endian": "little",
    "target-pointer-width": "64",
    "target-c-int-width": "32",
    "os": "none",
    "executables": true,
    "linker-flavor": "ld.lld",
    "linker": "rust-lld",
    "panic-strategy": "abort",
    "disable-redzone": true,
    "features": "-mmx,-sse,+soft-float",
}
</code></pre>

=end html

=over 4 

=item * B<data-layout> 

integer, floating point, pointer type 의 크기를 정의한다. B<target-pointer-width> 등은 이에 파생되는 필드다.

=item * B<linker-flavor>, B<linker> 

host system 의 기본 링커를 사용하는 대신, 러스트에 들어있는 LLD 링커를 사용한다.

=item * B<panic-strategy> 

panic 상태가 되면 stack unwinding 하지 않고 프로그램이 중단되도록 한다.

=item * B<disable-redzone> 

커널을 만드려면 몇몇 지점에 인터럽트 핸들링이 필요하다. 
안전을 위해 L<red zone> 이라 불리는 stack pointer optimization 을 비활성화해야 한다. B<red zone> 이 스택을 변경시키기 때문이다.

L<Disabling the read zone|https://os.phil-opp.com/red-zone/>

=item * B<features> 

target feature 를 활성화(+)/비활성화(-) 한다.

=over 4

=item * B<mmx>, B<sse>

프로그램의 속도를 올려줄 수 있는 Single Instruction Multiple Data ( SIMD ) 를 지원하는 feature.

커널에서 큰 SIMD 레지스터를 사용하면 성능 문제를 일으킬 수 있다. 
커널은 인터럽트 된 프로그램을 계속 실행하기 전에 모든 레지스터를 원래 상태로 되돌려 놓아야 하기 때문이다. 
이것은 시스템 콜이나 하드웨어 인터럽트 시, 커널이 SIMD 상태를 메인 메모리에 저장해야 한다는 것을 말한다.
SIMD 가 커지고 인터럽트가 자주 발생하면 성능이 낮아지게 된다. 이를 피하기 위에 여기에서 다루는 커널은 SIMD 를 비활성화 한다.

하지만 I<x86_64> 에서의 floating point 연산은 SIMD 레지스터를 필요로 하기 때문에 문제가 발생한다. 
이를 해결하기 위해서, 모든 floating point 연산이 정수에 기반한 함수로 이루어지도록 하는 B<soft-float> feature 를 추가한다.

L<Disabling SIMD|https://os.phil-opp.com/disable-simd/>

=back

=back

=head2 Building Our Kernel

새로운 targer 에 대한 컴파일을 위해 Linux conventions 를 사용한다. 이것은 우리가 I<_start> 엔트리 포인트가 필요하다는 것을 말한다.

=begin html

<pre><code class="rust">
// src/main.rs

#![no_std] // don't link the Rust standard library
#![no_main] // disable all Rust-level entry points

use core::panic::PanicInfo;

/// This function is called on panic.
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}

#[no_mangle] // don't mangle the name of this function
pub extern "C" fn _start() -> ! {
    // this function is the entry point, since the linker looks for a function
    // named `_start` by default
    loop {}
}
</code></pre>

=end html

이 엔트리 포인트는 host os 에 독립적이다. 

이제 json 으로 작성된 target 에 대한 커널을 빌드해보자.

=begin html

<pre><code class="shell">
cargo build --target x86_64-rust_os.json
</code></pre>

=end html

러스트 컴파일러가 B<core> library 를 찾을 수 없다는 에러가 나온다. 
core library 는 B<Result>, B<Option>, iterators 와 묵시적으로 B<no_std> crate 에 링킹된 것들을 가지고 있다.

이 문제는 core library 가 러스트 컴파일러에 미리 컴파일 된 형대로 배포되었기 때문이다. 즉 core library 는 host triples 에 대해서만 유효하다.

=head2 Cargo xbuild

위의 문제를 해결하기 위해 I<cargo xbuild> 가 있다. 이것은 B<core> 와 다른 library 를 cross compile 하는 I<cargo build> 를 포함한다. 다음을 통해 설치하자.

=begin html

<pre><code class="shell">
cargo install cargo-xbuild
</code></pre>

=end html

위에서 실패했던 cargo build 명령어를 다음과 같이 수정하고 실행한다.

=begin html

<pre><code class="shell">
cargo xbuild --target x86_64-rust_os.json
</code></pre>

=end html

또 다시 오류가 발생하는데, 이 명령어가 러스트의 코드에 의존하고 있기 때문이다. 이것을 다음의 명령어를 통해 설치할 수 있다.,

=begin html

<pre><code class="shell">
rustup component add rust-src
</code></pre>

=end html

이 명령의 실행 결과로 cross compile 된 여러 library 를 확인할 수 있고, 현재 디렉토리 이름을 가진 crate 가 컴파일 된 것도 확인할 수 있다.

이제 이 커널을 우리의 target 에 빌드할 수 있다. 하지만 부트 로더가 될 I<_start> 엔트리 포인트가 비어있는 상태다. 이것을 화면에 내용을 출력하도록 만들어보자.

=head2 Set a Default Target

B<cargo xbuild> 실행 시 매번 B<--target> 옵션을 넣기 싫다면 B<.cargo/config> 파일에 다음을 작성하자.

=begin html

<pre><code class="rust">
# in .cargo/config

[build]
target = "x86_64-rust_os.json"
</code></pre>

=end html

이제 우리는 B<cargo xbuild> 명령만을 통해서 커널을 빌드할 수 있다.

=head2 Printing to Screen

텍스트를 화면에 출력하는 가장 쉬운 방법은 VGA text buffer 를 사용하는 것이다. 이것은 VGA 하드웨어에 매핑된 special memory area 로, 스크린에 출력된 내용을 담고 있다.
이 스크린은 일반적으로 80 칸, 25 줄의 셀로 구성되어 있다. 각 셀은 색상을 포함하는 아스키 문자로 표시된다. 

"Hello World!" 를 출력하기 위해서 버퍼가 B<0xb8000> 에 위치해 있다는 것을 알면 된다.

"Hello World" 는 다음처럼 구현된다.

=begin html

<pre><code class="rust">
static HELLO: &[u8] = b"Hello World!";

#[no_mangle]
pub extern "C" fn _start() -> ! {
    let vga_buffer = 0xb8000 as *mut u8;

    for (i, &byte) in HELLO.iter().enumerate() {
        unsafe {
            *vga_buffer.offset(i as isize * 2) = byte;
            *vga_buffer.offset(i as isize * 2 + 1) = 0xb;
        }
    }

    loop {}
}
</code></pre>

=end html

B<0xb8000> 를 raw pointer 에 캐스팅하고, B<unsafe> 블록을 사용했다. 이유는 러스트 컴파일러는 우리가 생성한 raw pointer 가 유효한지 알 수 없기 때문이다.
이 포인터는 어디든지 가리킬 수 있고 데이터를 훼손할 수 있다. 따라서 B<unsafe> 블록을 사용해서 우리가 이 동작이 절대적으로 옳다고 알려줘야한다. 

하지만 이런 코딩은 B<러스트에서 지향하는 방식이 아니다.> 따라서 B<unsafe> 의 사용을 최소화해야 한다. 

러스트는 안전한 추상화 생성해줌으로써 우리를 도와준다. 
예를 들어 위의 VGA 버퍼를 불안정한 모든 것들을 캡슐화시키고 외부로부터의 잘못된 동작을 수행할 수 없게 보장할 수 있었다.
이 방법대로면 B<unsafe> 의 사용을 최소로 줄일 수 있고 데이터가 훼손되지 않도록 만들어 줄 수 있다. 이것은 다음 포스트에서 다룬다.

=head2 Running our Kernel

이제 컴파일된 커널을 부트 로더와 함께 링킹해줌으로써 부팅 가능한 디스크 이미지로 만들어 보자. 그 뒤에 QEMU 가상 머신을 통해 디스크 이미지를 실행시켜볼 수 있다.
usb 를 통해 실제 하드웨어에서 부팅시킬 수도 있다.

=head2 Creating a Bootimage

부트 로더는 CPU 를 초기화하고 커널을 로딩해야 한다.

부트 로더를 직접 작성하는 대신에, B<bootloader> crate 를 사용할 것이다. 이를 위해 다음의 의존성을 추가해야 한다.

=begin html

<pre><code class="toml">
# in Cargo.toml

[dependencies]
bootloader = "0.8.0"
</code></pre>

=end html

의존성을 추가해줘도, 컴파일 후에 부트로더와 커널을 링킹해줘야 하는 문제가 남아 있다. 하지만 cargo 는 post-build 스크립트를 지원하지 않는다.

이 문제를 해결하기 위해서, B<bootimage> 를 만들었다. 이것은 커널과 부트 로더를 컴파일 하고 부팅 가능한 디스크 이미지를 만들기 위해 이들을 링킹한다.
그리고 B<bootimage> 를 실행시키고 부트 로더를 빌드하기 위해 러스트 컴포넌트 B<llvm-tools-preview> 가 필요하다. 
이를 위해 다음 명령을 실행하자.

=begin html

<pre><code class="shell">
cargo install bootimage --version "^0.7.7"
rustup component add llvm-tools-preview
</code></pre>

=end html

이제 다음을 실행하자

=begin html

<pre><code class="shell">
cargo bootimage
</code></pre>

=end html

터미널 창을 확인해 보면 커널을 먼저 컴파일하고 부트 로더를 컴파일 하는 것을 확인할 수 있다. 
그리고 B<bootimage> 는 이 커널과 부트 로더를 부팅 가능한 디스크로 결합시킨다.

=head2 How does it work?

B<bootimage> 는 다음을 순서대로 수행한다.

=over 4

=item 1 커널을 ELF 파일로 컴파일한다.

=item 2 부트 로더 의존성을 standalone 으로 실행할 수 있게 컴파일 한다.

=item 3 커널 ELF 파일을 부트 로더로 링킹한다.

=back

부팅 시 부트 로더는 ELF 파일을 읽고 파싱한다. 그리고 프로그램 세그먼트를 페이지 테이블의 가상 주소, B<.bss> 섹션에 매핑시키고 스택을 초기화한다.
마지막으로 엔트리 포인트의 주소로 이동한다.

=head2 Booting it in QEMU

이제 디스크 이미지를 가상 머신에서 실행시킬 수 있다. QEMU 를 사용하자.

=begin html

<pre><code class="shell">
# ./ 는 프로젝트 디렉토리
qemu-system-x86_64 -drive format=raw,file=./target/x86_64-rust_os/debug/bootimage-rust_os.bin
</code></pre>

=end html

=head2 Using cargo run

이를 쉽게 실행시키기 위해서 B<runner> 를 설정해주자

=begin html

<pre><code class="toml">
# in .cargo/config

[target.'cfg(target_os = "none")']
runner = "bootimage runner"
</code></pre>

=end html

여기에서 none 은 위의 x86_64-rust_os.json 에 작성된 target 을 의미한다. 
B<runner> 는 이어지는 명령어가 B<cargo run> 을 통해서만 실행되도록 해주고, 해당 명령어는 빌드가 성공적으로 끝나면 cargo run 의 첫 번째 인자로 전달된다.

이제 B<cargo xrun> 을 통해 "Hello World!" 를 확인해보자!

=cut
