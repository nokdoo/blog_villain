=encoding utf8
=pod

=head1 NAME

Graph

=head1 Terminology

=over 4

=item * B<vertex, v> - 정점

=item * B<edge, e> - 간선

=item * B<V> - 정점의 집합

=item * B<E> - 간선의 집합

=item * B<G = {V, E}, {G}> - V 와 E 로 이루어진 무방향 그래프

=item * B<< G = <V, E>, <G> >> - V 와 E 로 이루어진 방향 그래프

=item * B<{v,w}> - 정점 v 와 정점 w 사이의 무방향 간선

=item * B<< <v,w> >> - 정점 v 에서 정점 w 로 향하는 방햐이 간선

=item * B<skipped edge> - DFS 도중 이미 한번 지나쳤던 정점으로 향하는 간선

=item * B<followed edge> - DFS 의 자취가 되는 간선

=item * B<source vertex, s> - 들어오는 간선이 없는 정점

=item * B<sink vertex, t> - 나가는 간선이 없는 정점

=item * B<< cut <N,N'> >> - <G> 를 각각 s 와 t 를 포함하는 정점의 집합 N, N' 로 분할한 형태

=back

=head1 Graph Searching

=head2 Breadth-First Search

=begin html

<pre><code class="plaintext">
# v 에서 시작하는 BFS
procedure BreadthFirstSearch(graph G, vertex v):
    foreach vertex w in G do Encountered(w) <- false
    
    # 지나간 적 없고 인접한 정점을 담는 큐
    Q <- MakeEmptyQueue()
    Encountered(v) <- true
    Enqueue(v,Q)
    until IsEmptyQueue(Q) do
        w <- Dequeue(Q)
        Visit(w)
        foreach neighbor w' of w do
            if not Encountered(w') then
                Encountered(w') <- true
                Enqueue(w',Q)
</code></pre>

=end html

=head2 Depth-First Search

=begin html

<pre><code class="plaintext">
# v 에서 시작하는 DFS
procedure DepthFirstSearch(graph G, vertex v):
    foreach vertex w in G do Encountered(w) <- false
    RecursiveDFS(v)

procedure RecursiveDFS(vertex v):
    Encountered(v) <- true
    PreVisit(v)
    foreach neighbor w of v do
        if not Encountered(w) then RecursiveDFS(w)
    PostVist(v)
</pre></code>

=end html

=head2 Biconnectivity 다시 쓰자

임의의 정점을 삭제해도 그래프가 끊기지 않는 성질.

=over 4 

=item * 연결 그래프

이 그래프가 연결되어 있는지는 DFS 또는 BFS 로 쉽게 판별할 수 있다.

=item * vertex-disjoint

정점 B<u> 에서 정점 B<v> 로 이동하는 경로 B<p1>, B<p2> 가 있다.

경로 B<p1> 과 B<p2> 가 B<u>, B<v> 를 제외한 어떤 정점을
공유하지 않는다면 이 경로들을 B<vertex-disjoint> 라고 한다.

=item * biconnected

=over 4

=item * 두 정점을 지나는 경로에 두 개의 B<vertex-disjoint> 경로가 
존재한다면 이 무방향 그래프는 B<biconnected> 그래프다.

=item * 그래프 G 에서 정점 v 와 그 인접 간선들을 제거한 것을 
G-v 라 하자. G-v 가 연결되어 있지 않다면 v 는 G 의 B<cutvertex> 다. 
B<cutvertex> 가 존재하지 않는 그래프는 B<biconnected> 그래프다.

=back

위의 방법을 사용하면 O(n^2) 의 시간이 소요된다.

다른 방법으로 접근해보자.

서브그래프 B<T> 를 그래프 G 에서 B<skipped edge> 가 제거된 그래프라 하자. 즉 서브그래프 B<T> 는 B<followed edge> 로만 연결된다. 
이제 B<T> 는 n 개의 정점과 n-1 개의 간선을 가지게 되고 이는 트리로 간주될 수 있다. 
그리고 {v,w} 의 정점 v 는 정점 w 의 부모가 된다.

서브그래프 B<T> 의 root 에 대한 케이스를 구분해보자.

=over 4

=item * B<T> 의 root 정점이 두 개 이상의 자식을 갖는 경우 이 
root 는 B<cutvertex> 다.

=item * root 가 아닌 정점 v 와 그 자식 중 하나인 w 가 있다.
w 의 자손 중에 w 의 조상으로 향하는 B<skipped edge> 를 가진 정점이 존재하지 않는다면 v 는 B<cutvertex> 다.

=back

=back

=head1 Greedy Algorithms On Graphs

=head2 Minimum Spanning Trees

통신 네트워크는 넓은 간격으로 설치된 여러 스위치로 구성되어있다. 
이 스위치들은 통신 선로를 통해서 서로 통신하는데, n 개의 스위치가 있다면 n(n-1)/2 개의 통신 선로를 설치할 수 있을 것이다.
하지만 스위치 간 최소 하나의 통신 선로만 설치하면 되기 때문에, 모두 설치하지 않아도 되며 이 설치 비용을 최소로 하려고 한다.

그래프 G = {V, E} 가 있고, E' 를 우리가 찾으려는 간선의 집합이라고 하자. 그리고 함수 c(E') 는 통신 선로들의 최소 설치 비용이라고 하자.
또, E' 를 이용해 다시 그려지는 그래프를 G' = {V, E'} 라 하자.

정점들의 간선이 하나씩 존재하기 때문에 G' 은 트리가 됨을 알 수 있고, |E'| = |V| - 1 이 될 것이다. 이때 생성된 트리를 B<minimum spanning tree> 라 한다.
이 minimum spanning tree 는 최소 하나 이상 존재할 수 있다.

이 트리를 구하는 알고리즘은 두 가지 방법이 있다.

=over 4

=item * Prim's Algorithm

두 개의 집합을 이용한다. 

하나는 간선의 집합 E' 이고 하나는 정점의 집합 N 이다. E' 는 초기에 비어있는 상태며, N 은 V 의 아무 정점 하나를 포함한 상태로 시작한다.
그리고 |V| - 1 만큼 다음을 반복한다. 

N 에 포함된 정점과 포함되지 않은 정점 사이의 비용이 최소인 간선 e 를 찾는다. 그리고 e 를 E' 에, v 를 N 에 포함시킨다.

=item * Kruskal's Algorithm

초기에 비어있는 간선 집합 E' 를 이용한다.

|V| - 1 만큼 다음을 반복한다.

E' 에 포함되지 않은 최소 비용의 간선 e 를 E' 에 포함시킨다. 이 때 생성되는 그래프 G = {V, E'} 는 사이클이 형성되면 안된다.

=back

이 두 알고리즘은 greedy algorithm 이다. 이 알고리즘은 각 단계에서 최선의 방법을 찾지만 전체 결과가 최선임을 보장해주지 못한다.

위 문제에 대해서는 두 알고리즘 모두 최선의 결과를 반환한다.

Kruskal 알고리즘을 살펴보자.

=begin html

<pre><code class="plaintext">
# G 의 minimum spanning tree 의 간선 집합을 반환한다.
function KruskalMST(undirected graph G): set

    # 반환할 트리를 초기화.
    E' <- MakeEmptySet()

    # G' = {G, E'} 의 components 숫자
    components <- |G|

    # G 의 간선들의 우선순위 큐
    edges <- make a priority queue containing the edges of G

    foreach vertex u of G do MakeSet(u)

    while components > 1 do
        {u,w} <- DeleteMin(edges)
        U <- Find(u)
        W <- Find(w)
        if U != W then
            Union(U, W)
            Insert({u,w}, E')
            components <- components - 1
    return E'
</code></pre>

=end html

=head2 Single-Source Least-Cost Paths

<G> 의 각 간선에 숫자를 표시해 정점 간 이동 비용을 나타내자. 정점 간 비용은 c(u, v) 로 나타낸다.

경로의 비용은 한 정점에서 다른 정점으로 이동할 때 필요한 비용의 합이라 하자. 최소 비용 경로는 어떻게 찾을 수 있을까?
여기서 비용 대신에 거리를 나타내면 최소 이동 거리를 찾는 것과 같아진다.

이를 위해 Dijkstra 알고리즘이 존재한다.

=head3 Dijkstra 알고리즘

B<source vertex> S 로부터 모든 정점까지의 비용을 계산한다.


=begin html

<pre><code class="plaintext">
procedure DijkstraLeastCostPaths(directed graph G, vertex S):
# 각 정점까지의 거리를 잠정적인 거리로 생각하고, S 까지의 거리는 0, 다른 정점 까지의 거리를 infinite number 로 설정한다.
    U <- MakeEmptySet()
    foreach vertex v in G do
        Distance(v) <- infinite number
        Insert(v, U)
    Distance(S) <- 0

    repeat |G| times
        v <- any member of U with minimum distance
        Delete(v, U)
        foreach neighbor w of v do
            if Member(w, U) then
                Distance(w) <- min(Distance(w), Distance(v) + c(v,w))
</code></pre>

=end html

Dijkstra 알고리즘은 U 에 어떤 자료구조를 사용할 지에 따라 구현이 달라진다.

=over 4

=item * Priority queue ( heap )

각 정점까지의 이동거리를 우선순위로 본다. 
이를 이용하면 I<DeleteMin> 함수만으로 U 의 최단 거리 정점을 찾을 수 있고, 이를 U 에서 삭제할 수 있다.

시간복잡도를 따져보자. 정점의 개수를 n, 간선의 개수를 e 라 한다면, I<DeleteMin> 의 시간복잡도는 O(logn) 이다. 
이 연산을 |G| 만큼, 즉 n 번 반복하기 때문에 O(nlogn) 이 될 것이다.

그리고 I<ChangePriority> 의 시간복잡도도 마찬가지로 O(logn) 이기 때문에, 
정점이 가지고 있는 e 의 개수 만큼 계산하면 O(elogn) 시간이 추가된다. ( 방향 그래프이기 때문에 간선은 정점에 독립적으로 볼 수 있다. )

따라서 우선순위 큐를 이용하면 O( (n+e)logn ) 의 시간복잡도를 갖는다.

=item * Bit array

이 방법은 그래프의 밀도가 높을 때 효율적이다.

각 정점을 비트 배열에 대응시킨다. 값이 1 이면 U 에 포함된 것을 의미하고, 0 이면 U 에서 제외된 것을 의미한다. 
U 의 최단 거리 정점을 찾는 것은 O(n) 시간이 걸리지만, 삽입, 삭제, 수정은 O(1) 시간이 걸린다. 
그래프의 밀도가 높을 경우, 모든 정점이 자기 자신을 제외한 정점으로의 간선을 가지고 있기 때문에 최단 거리를 수정하는 연산은 최대 n-1 번 이루어진다.
이 둘을 더하면 O(2n) 이 되고, 이 루프를 |G| 만큼, 즉 n 번 반복하면 이 방법은 O(n^2) 의 시간복잡도를 갖는다.

간선의 개수가 n^2 에 가깝다면 Priority queue 를 사용하는 것보다 더 나은 효율을 보인다. ( O( n^2 logn ) vs O(n^2) )

=back


=head1 All Pairs Least-Cost Paths

모든 정점 간 최소 비용 구하기.

n 개의 정점을 B<source vertext> 로 놓고 탐색하면 원하는 정보를 얻을 수 있고, 이는 O(n^3) 의 시간이 걸린다.

같은 시간이 걸리지만 이를 쉽게 구현하는 Floyd-Warshall 알고리즘을 살펴보자.

=begin html

<pre><code class="plaintext">
# {u, v} 의 비용을 리턴.
# {u, v} 가 존재하지 않는다면 infinite number 를 리턴.
# {u, u} 의 비용은 0
c(u, v)

# V : 그래프 G 의 모든 정점의 집합.
# U : 정점의 집합. 초기값은 비어있다.

# 그래프 G 의 정점 간 최소 비용을 찾음
procedure FloydWarshallAllLeastCostPaths(directed graph G) :
    
    # Cost_U[u, v] 는, U 의 한 정점을 중간 지점으로 삼아 정점 u 부터 정점 v 까지 이동하는 최소 비용을 나타낸다.
    # U 값은 현재 비어 있는 상태. 따라서 중간 지점으므로 Cost_U[u, v] 는 c(u, v) 와 같다.
    # 초기 U 에 대한 Cost_U 를 설정.
    foreach vertex u in G do
        foreach vertex v in G do
            Cost[u, v] <- c(u, v)

    # V 의 각 정점들을 중간 지점(w)으로 사용.
    # 모든 정점을 사용하면 U = V 상태와 같다고 본다.
    foreach vertex w in G do
        foreach vertex u in G do
            foreach vertex u in G do
                Cost[u, v] <- min( Cost[u, v], Cost[u, w] + Cost[w, v] )
</code></pre>

=end html

이 알고리즘은 dynamic programming 이다.

=head1 Network Flow

들어가기전에 용어들과 특징들을 살펴보자.

=head2 Terminologies and Their Features

B<network> 란 B<source vertex> 와 B<sink vertex> 를 가진 그래프 <G> 를 말한다. 

B<C(e)> 는 간선의 용량을 나타내는 함수다. 

<u,v> 가 존재하지 않는다면 C(u, v) = 0 이라 한다. 

B<f(e)> 는 유량을 나타내는 함수며, 유량은 다음의 제약을 따른다.

=over 4

=item * 0 <= f(e) <= C(e)

각 간선에 할당되는 유량은 음수가 아니면서 간선의 용량을 넘지 않는다.

=item * s 와 t 가 아닌 정점 v 에 대해 v 로의 유량은 v 로부터의 유량과 같다.

즉, v 로 향하는 f(e) 의 합은 v 에서 나가는 f(e') 과 그 크기가 같다. 다른 말로, v 로의 net flow 가 0 이다.

=back

f(e) = C(e) 라면 간선 e 가 포화상태임을 의미한다. 

B<f(G)> 는 s 에서 시작하는 유량의 합을 의미한다. 이는 t 로 들어가는 유량의 합과 같다.

E 에 포함되지 않는 <u,v> 에 대해 f(u,v) = 0 이다.

B<< cut <N,N'> >> 은, G 를 각각 s 와 t 를 포함하는 정점의 집합 N, N' 으로 나누는 분할이다.

B<< cut value >> 는 N 에서 N' 으로의 net flow 로 정의한다. 
이는 N 에서 N' 으로 흐르는 전체 유량에서 N' 에서 N 으로 흐르는 전체 유량을 뺀 것과 같다.

 f(N,N') = SUM of f(u,v) ( u in N, v in N' ) - SUM of f(v,u) ( v of N', u of N )

B<< cut capacity >> 는 N 에서 N' 으로 향하는 간선들의 용량 합과 같다.

 C(N,N') = SUM of C(u,v) ( u in N, v in N' )

cut capacity 는 모든 나가는 간선이 포화상태이고 들어오는 간선의 유량이 0 일 때의 cut value 와 같다.
모든 유량은 cut capacity 를 초과할 수 없다. 특히, 유량이 가질 수 있는 최대값은 minimum cut capacity 를 초과할 수 없다.

 모든 cut 에 대해 f(G) = f(N,N') 이다. 

B<augmenting capacity> 는 <u,v> 에 추가적으로 흐를 수 있는 정방향 유량, 또는 현재 유량을 상쇄시킬 수 있는 역방향 유량을 의미한다.

 augmenting capacity = C(u,v) - f(u,v)
 or
 augmenting capacity = C(u,v) + f(v,u)

 이때 두 유량이 동시에 존재할 수 없는 경우,

 augmenting capacity = C(u,v) - f(u,v) + f(v,u)

 처럼 쓰기도 한다.

B<augmenting network, A(G,f)> 는 이 augmenting capacity 의 존재 가능성을 나타내는 그래프다.

B<C_A> 는 augmenting network A(G,f) 의 capacity 를 나타내는 함수다.

...

=head2 Finding Maximum Flows

그래프의 최대 유량을 어떻게 구할 수 있을까?

간단한 알고리즘은 다음과 같다. 

모든 간선의 유량을 0 으로 설정한다. 그리고 augmenting network 를 구성하고 augmenting path 를 찾고 유량을 증가시킨다.
n 이 그래프의 정점 개수일 때, 이 알고리즘의 시간복잡도는 O(n^3) 이다.

핵심 아이디어는 augmenting path 를 길이 순으로 찾고 사용하는 것이다.




=cut
