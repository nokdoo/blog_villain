=encoding utf8
=pod

=head1 NAME

Regular Expression

=head1 DESCRIPTION

regex 의 기능을 정리한다. 간단하거나 써본적 없는 기능은 명칭만 적고 설명하지 않는다.

=head1 Terminology

=over 4

=item * character class - [...]

=item * character-class metacharacter - character class 안에서 사용되는 metacharacter

=item * metacharacter - 특별한 의미를 갖는 문자

=item * literal - 그대로 표기되는 문자

=back

=head1 Quantifiers

=over 4

=item * B<?> - zero or one

=item * B<*> - zero or more

=item * B<+> - one or more

=item * B<{min,max}> - range

=back

=head1 Character Representations

표현하기 어려운 문자들을 위해 만들어진 metacharacter.

=head2 Character Shorthands

=over 4

=item * B<\a> - Alert <BEL>

=item * B<\b> - Backspace <BS>

=item * B<\e> - Escape <ESC>

=item * B<\f> - Form feed <FF>

=item * B<\n> - Newline <LF>

=item * B<\r> - Carriage return <CR>

=item * B<\t> - Horizon tab <HT>

=item * B<\v> - Vertical tab <VT>

=back

=head2 Escaped Character: \<metacharacter>

metacharacter를 리터럴 문자로 인식

=head2 Octal, Hex, Unicode Escapes

=over 4

=item * B<< \<num> >> - octal

=item * B<< \x<num> >> - hex

=item * B<< \u<num> >> - unicode

=back

=head2 Control Character

=over 4

=item * B<< \c<char> >> - control-char

=back

=head1 Character Classes and Class-Like Construct

=head2 Normal classes: [a-z], [^a-z]

B<*> 은 [ ] 안에서 metacharacter 로 인식되지 않는다.

[[a-z]-[aeiou]] 와 같은 minus 연산도 가능하다.(안되더라)

=head2 Exactly one byte

=head2 Unicode combining character sequence: \X

. 가 모든 문자를 나타낸다면, \X 는 모든 유니코드를 나타냄.

=head2 Class shorthands: \w, \d, \s, \W, \D, \S

=head2 Unicode properties scripts, and blocks:

[a-z] 처럼 유니코드 집합을 나타내기 위한 방법.

=head2 Class set operation

=head2 Mimicking class set operations with lookaround

Class set operation 은 모든 regex 구현체가 제공하는 기능이 아니다. lookaround 를 이용하면 set operation 을 흉내낼 수 있다.

=head2 POSIX character class: [[:alpha:]]

=over 4

=item * [:alnum:]

=item * [:alpha:]

=item * [:blank:] - space and tab

=item * [:cntrl:] - control

=item * [:digit:]

=item * [:graph:] - non-blank

=item * [:lower:]

=item * [:print:] - graph 와 비슷하지만 공백을 포함한다.

=item * [:punct:] - punctuation

=item * [:space:] - CR 등을 포함한 모든 공백

=item * [:upper:]

=item * [:xdigit:] - hex

=back

=head2 POSIX collating sequence: [[.span-11.]]

=head2 POSIX character equivalent: [[=n=]]

=head1 Anchors and Other Zero-width Assertions

=head2 String of line/string: ^, \A

=head2 End of line/string: $, \Z, \z

=head2 Start of match: \G

=head2 Word boundaries: \b, \B, \<. \>

=head2 Lookahead: (?=...), (?!...) Lookbehind: (?<=...), (?<!...)

=head1 Comments and Mode Modifiers

=head2 Mode modifier: (?<modifier>), (?-<modifier>)

이 괄호 부분을 읽으면 mode 가 켜짐. modifier 앞에 -를 붙이면 mode 가 꺼짐

=over 4

=item * B<i> - 대소문자 구분안함.

=item * B<x> - regex 에 공백과 주석 허용.

=item * B<s> - 문자열을 한 줄로 인식. 

\n 도 평범한 문자의 일부. ^, $ 는 문자열의 시작과 끝.

=item * B<m> - 문자열을 여러 줄로 인식.

\n 로 각 줄을 구분함. ^, $ 는 각 줄의 시작과 끝

=back

=head2 Mode-modified span: (?<modifier>:...)

mode 가 on/off 가 아닌 괄호 영역에만 적용됨.

=head2 Comments: (?#...), #...

=head2 literal-text span: \Q...\E

$regex 처럼 변수가 가리키는 값이 아닌 '$regex' 자체를 넣고 싶을 때 사용.

=head1 Grouping, Capturing, Conditionals, and Control

=head2 Capturing/Grouping Parentheses: (...) and \1, \2, ...

=head2 Grouping-only parentheses(non-capturing parentheses): (?:...)

=head2 Named capture: (?<name>...>)

=head2 Atomic grouping: (?>...)

=head2 Alternation: ...|...

=head2 Conditional: (?if then|else)

if 에는 앞선 괄호에 의해 capture 된 결과가 올 수 있다.

=head2 Greedy quantifiers: *, +, ?, {min,max}

=head2 Lazy quantifiers: *?, +?, ??, {min,max}?

=head1 other

=over 4

=item * B<(...)> parentheses

=over 8 

=item * 1. alternation 의 범위

=item * 2. quantifier 의 범위

=item * 3. backreference 의 범위

=back

=item * B<(?:...)> - non-capturing parentheses

parentheses 의 3번 기능을 무시

=item * B<\1, \2> - backreference

=back

=head1 Lookaround

=over 4

=item * B<(?=...)> - positive lookahead

현재 match point 에서 오른쪽으로 텍스트를 찾음. match point 이동하지 않음.

=item * B<(?!...)> - negative lookahead

=item * B<(?<=...)> - positive lookbehind

현재 match point 에서 왼쪽으로 텍스트를 찾음. match point 이동하지 않음.

=item * B<(?<!...)> - negative lookahead

=back

=head1 Mode

=over 4

=item * B</i> - 대소문자를 구분하지 않음.

=item * B</x> - regex 의 빈칸과 주석을 무시

=back

=cut
